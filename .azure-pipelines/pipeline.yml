# Runs: ByCustodian (single), ByCustodian (multi-list), and ALLADH (monthly).
trigger: none
pr: none

# UTC cron (example ~07:35 IST and ~08:05 IST on the 1st)
schedules:
- cron: "5 2 1 * *"
  displayName: "Monthly ALLADH – NonProd"
  branches: { include: [ develop_new ] }
  always: true
- cron: "35 2 1 * *"
  displayName: "Monthly ALLADH – Prod"
  branches: { include: [ develop_new ] }
  always: true

# ------------------- PARAMETERS -------------------
parameters:
# Mode switch: ByCustodian | AllADH
- name: run_mode
  type: string
  default: ByCustodian
  values: [ ByCustodian, AllADH ]

# Single custodian (used when run_mode=ByCustodian and list is empty)
- name: adh_group
  type: string
  default: ""

# Multi-custodian list (used when run_mode=ByCustodian AND list has values)
- name: adh_groups_list
  type: object
  default: []

# prd | nonprd
- name: adh_subscription_type
  type: string
  default: prd
  values: [ prd, nonprd ]

# agent suffix choice (_agent1 / _agent2 / etc.)
- name: poolSuffix
  type: string
  default: '_agent1'
  values: [ '_agent1', '_agent2' ]

# Inputs
- name: prodCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/prod_permissions.csv'
- name: nonProdCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/nonprod_permissions.csv'
- name: kvSecretsCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/kvsecretsscan.csv'

# ---------------- HELPER VARIABLES ----------------
variables:
- name: firstCustodian
  value: ''
- ${{ if gt(length(parameters.adh_groups_list), 0) }}:
  - name: firstCustodian
    value: ${{ parameters.adh_groups_list[0] }}

# Compute pool names once (for single and multi)
- name: poolNameSingle
  value: ${{ format('{0}_{1}{2}', parameters.adh_group, parameters.adh_subscription_type, parameters.poolSuffix) }}
- name: poolNameList
  value: ${{ format('{0}_{1}{2}', variables.firstCustodian, parameters.adh_subscription_type, parameters.poolSuffix) }}

# ---------------- STAGES ----------------

# ========== Monthly ALLADH (NonProd) ==========
- stage: ALLADH_NonProd
  displayName: "ALLADH – NonProd (monthly)"
  condition: and(eq(variables['Build.Reason'],'Schedule'), eq(variables['Build.SourceBranchName'],'develop_new'))
  jobs:
  - template: stages/rg-permissions.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      prodCsvPath: ${{ parameters.prodCsvPath }}
      nonProdCsvPath: ${{ parameters.nonProdCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
  - template: stages/rg-tags.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-tags'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
  - template: stages/kv-secrets.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      secretsCsvPath: ${{ parameters.kvSecretsCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-secrets'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
  - template: stages/kv-permissions.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
  - template: stages/kv-firewall.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-firewall'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'

# ========== Monthly ALLADH (Prod) ==========
- stage: ALLADH_Prod
  displayName: "ALLADH – Prod (monthly)"
  condition: and(eq(variables['Build.Reason'],'Schedule'), eq(variables['Build.SourceBranchName'],'develop_new'))
  jobs:
  - template: stages/rg-permissions.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      prodCsvPath: ${{ parameters.prodCsvPath }}
      nonProdCsvPath: ${{ parameters.nonProdCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'
  - template: stages/rg-tags.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-tags'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'
  - template: stages/kv-secrets.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      secretsCsvPath: ${{ parameters.kvSecretsCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-secrets'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'
  - template: stages/kv-permissions.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'
  - template: stages/kv-firewall.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-firewall'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'

# ========== Manual runs ==========
# Single custodian (one adh_group)
- ${{ if and(eq(parameters.run_mode,'ByCustodian'), eq(length(parameters.adh_groups_list), 0)) }}:
  - stage: SingleCustodian_Run
    displayName: ${{ format('ByCustodian – {0} ({1})', parameters.adh_group, parameters.adh_subscription_type) }}
    jobs:
    - template: stages/rg-permissions.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        prodCsvPath: ${{ parameters.prodCsvPath }}
        nonProdCsvPath: ${{ parameters.nonProdCsvPath }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/rg-perms'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolName: $(poolNameSingle)
    - template: stages/rg-tags.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/rg-tags'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolName: $(poolNameSingle)
    - template: stages/kv-secrets.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        secretsCsvPath: ${{ parameters.kvSecretsCsvPath }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/kv-secrets'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolName: $(poolNameSingle)
    - template: stages/kv-permissions.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/kv-perms'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolName: $(poolNameSingle)
    - template: stages/kv-firewall.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/kv-firewall'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolName: $(poolNameSingle)

# Multi-custodian (list) – use FIRST custodian to choose pool
- ${{ if and(eq(parameters.run_mode,'ByCustodian'), gt(length(parameters.adh_groups_list), 0)) }}:
  - stage: MultiCustodian_Run
    displayName: ${{ format('ByCustodian – multi ({0})', join(',', parameters.adh_groups_list)) }}
    jobs:
    # RG Permissions
    - template: stages/rg-permissions.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ variables.firstCustodian }}  # used for display name
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        prodCsvPath: ${{ parameters.prodCsvPath }}
        nonProdCsvPath: ${{ parameters.nonProdCsvPath }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/rg-perms'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolName: $(poolNameList)
        # We pass the *whole* list via env; each job template will only run once per template include.
        # If you want per-custodian fan-out, run separate includes with each custodian.
    - template: stages/rg-tags.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ variables.firstCustodian }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/rg-tags'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolName: $(poolNameList)
    - template: stages/kv-secrets.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ variables.firstCustodian }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        secretsCsvPath: ${{ parameters.kvSecretsCsvPath }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/kv-secrets'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolName: $(poolNameList)
    - template: stages/kv-permissions.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ variables.firstCustodian }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/kv-perms'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolName: $(poolNameList)
    - template: stages/kv-firewall.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ variables.firstCustodian }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/kv-firewall'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolName: $(poolNameList)
