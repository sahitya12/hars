trigger: none
pr: none

# Schedules are UTC. Example: 02:05/02:35 UTC on 1st = 07:35/08:05 IST.
schedules:
- cron: "5 2 1 * *"
  displayName: "Monthly ALLADH – NonProd"
  branches: { include: [ develop_new ] }
  always: true
- cron: "35 2 1 * *"
  displayName: "Monthly ALLADH – Prod"
  branches: { include: [ develop_new ] }
  always: true

# ---------- Parameters ----------
parameters:
- name: run_mode               # ByCustodian | AllADH | Multi
  type: string
  default: AllADH
  values: [ ByCustodian, AllADH, Multi ]

- name: adh_group              # single custodian
  type: string
  default: ""

- name: adh_groups_list        # multi-custodian list
  type: object
  default: []

- name: adh_subscription_type  # prd | nonprd
  type: string
  default: nonprd
  values: [ prd, nonprd ]

- name: poolSuffix             # _agent1 or _agent2 etc.
  type: string
  default: '_agent1'
  values: [ '_agent1', '_agent2' ]

# Inputs (CSV paths)
- name: prodCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/prod_permissions.csv'
- name: nonProdCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/nonprod_permissions.csv'
- name: kvSecretsCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/kvsecretsscan.csv'

# Compile-time helper: firstCustodian from list
variables:
- name: firstCustodian
  value: ''
- ${{ if gt(length(parameters.adh_groups_list), 0) }}:
  - name: firstCustodian
    value: ${{ parameters.adh_groups_list[0] }}

# ---------- Stages ----------
stages:

# ===== Monthly ALLADH (NonProd) =====
- stage: AUTO_AllADH_NonProd
  displayName: "AUTO ALLADH – NonProd"
  condition: and(eq(variables['Build.Reason'],'Schedule'), eq(variables['Build.SourceBranchName'],'develop_new'))
  jobs:
  - template: stages/rg-permissions.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      prodCsvPath: ${{ parameters.prodCsvPath }}
      nonProdCsvPath: ${{ parameters.nonProdCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
  - template: stages/rg-tags.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-tags'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
  - template: stages/kv-secrets.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      secretsCsvPath: ${{ parameters.kvSecretsCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-secrets'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
  - template: stages/kv-permissions.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
  - template: stages/kv-firewall.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-firewall'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'

# ===== Monthly ALLADH (Prod) =====
- stage: AUTO_AllADH_Prod
  displayName: "AUTO ALLADH – Prod"
  condition: and(eq(variables['Build.Reason'],'Schedule'), eq(variables['Build.SourceBranchName'],'develop_new'))
  jobs:
  - template: stages/rg-permissions.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      prodCsvPath: ${{ parameters.prodCsvPath }}
      nonProdCsvPath: ${{ parameters.nonProdCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'
  - template: stages/rg-tags.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-tags'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'
  - template: stages/kv-secrets.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      secretsCsvPath: ${{ parameters.kvSecretsCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-secrets'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'
  - template: stages/kv-permissions.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'
  - template: stages/kv-firewall.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-firewall'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'

# ===== Manual: Single custodian =====
- ${{ if eq(parameters.run_mode, 'ByCustodian') }}:
  - stage: Manual_ByCustodian
    displayName: "Manual – ByCustodian"
    jobs:
    - template: stages/rg-permissions.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        prodCsvPath: ${{ parameters.prodCsvPath }}
        nonProdCsvPath: ${{ parameters.nonProdCsvPath }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/rg-perms'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolSuffix: ${{ parameters.poolSuffix }}
    - template: stages/rg-tags.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/rg-tags'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolSuffix: ${{ parameters.poolSuffix }}
    - template: stages/kv-secrets.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        secretsCsvPath: ${{ parameters.kvSecretsCsvPath }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/kv-secrets'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolSuffix: ${{ parameters.poolSuffix }}
    - template: stages/kv-permissions.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/kv-perms'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolSuffix: ${{ parameters.poolSuffix }}
    - template: stages/kv-firewall.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/kv-firewall'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolSuffix: ${{ parameters.poolSuffix }}

# ===== Manual: Multi-custodian (serial) – pool from FIRST custodian =====
- ${{ if and(eq(parameters.run_mode, 'Multi'), gt(length(parameters.adh_groups_list), 0)) }}:
  - stage: Manual_Multi
    displayName: "Manual – Multi-custodian (serial)"
    variables:
    - group: modernization_tfstate_backend_details
    jobs:
    - ${{ each cust in parameters.adh_groups_list }}:
      - template: ./.azure-pipelines/templates/job.powershell-with-az.yml
        parameters:
          variableGroup: modernization_tfstate_backend_details
          displayName: "RG Permissions – ${{ cust }}"
          scriptPath: 'sanitychecks/scripts/Scan-RG-Permissions-ByCustodian.ps1'
          workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
          arguments: >
            -TenantId "$(tenant_id)"
            -ClientId "$(backend_client_id)"
            -ClientSecret "$(backend_client_secret)"
            -ProdCsvPath '$(Build.SourcesDirectory)/sanitychecks/inputs/prod_permissions.csv'
            -NonProdCsvPath '$(Build.SourcesDirectory)/sanitychecks/inputs/nonprod_permissions.csv'
            -adh_group "${{ cust }}"
            -OutputDir "$(Build.ArtifactStagingDirectory)/rg-perms"
            -BranchName "$(Build.SourceBranchName)"
          artifactName: "rg-perms"
          publishPath: "$(Build.ArtifactStagingDirectory)/rg-perms"
          poolType: self
          # Use FIRST custodian for pool selection + suffix
          poolName: ${{ format('{0}_{1}{2}', variables['firstCustodian'], parameters.adh_subscription_type, parameters.poolSuffix) }}
          adh_group: ${{ cust }}
          adh_subscription_type: ${{ parameters.adh_subscription_type }}
